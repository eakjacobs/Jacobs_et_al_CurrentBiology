function [U, V, t, SVDinfo] = loadSVDfiles(b, doHemoCorrect, fewerSVDs, tpm);
% function that loads U, V & t for GCAMP and ratiometric data
% does hemodynamic correction for dual wavelength recordings (unless doHemoCorrect is set to false)
% takes as input
% b - the block format generated by generateGenBlock function
% doHemoCorrect - true or false, whether to apply hemodynamic correction
% fewerSVDs - true or false; fewer can spead up computation
% tpm - true or false, if set to true it will compute total power per pixel
%       and generate a map of total power across image

if nargin < 4
    tpm = false;
end
if nargin < 3
    fewerSVDs = false;
end

[EJDirs]    = setEJDirs;
SetDefaultDirs;
DIRS.Stacks = '\\zserver3.cortexlab.net\Data\Stacks';
svdDirOld   = '\\zserver.cortexlab.net\Data\GCAMP';
svdDirNew   = '\\zserver.cortexlab.net\Data\Subjects';


%%
% load SVD data
nSV = 500;
if b.recording == false
    error('This experiment was not recorded');
else
    switch b.indicator
        
        case 'GCAMP'
            Vnpy = fullfile(svdDirOld,b.animal,b.iseries,b.iexp,strcat(b.iseries,'_',b.iexp,'_',b.animal,'_SVD_V.npy'));
            svdDir = 'old';
            if ~exist(Vnpy)
                Vnpy = fullfile(svdDirOld,b.animal,b.iseries,b.iexp,'SVD_Results_V.npy');
                if ~exist(Vnpy)
                    Vnpy = fullfile(svdDirNew,b.animal,b.iseries,b.iexp,'svdTemporalComponents_blue.npy');
                    svdDir = 'new';
                    if ~exist(Vnpy)
                        Vnpy = fullfile(svdDirNew,b.animal,b.iseries,'svdTemporalComponents_blue.npy');
                        if ~exist(Vnpy)
                            Vnpy = fullfile(svdDirNew,b.animal,strcat(b.iseries,'_',b.iexp),b.iexp,'svdTemporalComponents_blue.npy');
                            if ~exist(Vnpy)
                                error('The SVD Temporal Components npy file does not exist');
                            end
                        end
                    end
                end
            end
            switch svdDir
                case 'old'
                    Tnpy  = fullfile(svdDirOld,b.animal,b.iseries,b.iexp,strcat(b.iseries,'_',b.iexp,'_',b.animal,'_SVD_t.npy'));
                    Unpy  = fullfile(svdDirOld,b.animal,b.iseries,b.iexp,'SVD_Results_U.npy');
                case 'new'
                    Tnpy = fullfile(svdDirNew,b.animal,b.iseries,b.iexp,'svdTemporalComponents_blue.timestamps.npy');
                    if ~exist(Tnpy)
                        Tnpy = fullfile(svdDirNew,b.animal,strcat(b.iseries,'_',b.iexp),b.iexp,'svdTemporalComponents_blue.timestamps.npy');
                    end
                    Unpy = fullfile(svdDirNew,b.animal,b.iseries,'svdSpatialComponents_blue.npy');
                    if ~exist(Unpy)
                        Unpy = fullfile(svdDirNew,b.animal,strcat(b.iseries,'_',b.iexp),'svdSpatialComponents_blue.npy');
                    end
            end
            disp('loading U, V & t...');
            switch svdDir
                case 'old'
                    V = double(readNPY(Vnpy)); V = V'; clear Vnpy
                    U = double(readNPY(Unpy)); clear Unpy
                case 'new'
                    if fewerSVDs
                        U = double(readUfromNPY(Unpy, nSV)); clear Unpy
                        V = double(readVfromNPY(Vnpy, nSV)); clear Vnpy
                    else
                        V = double(readNPY(Vnpy)); V = V'; clear Vnpy
                        U = double(readNPY(Unpy)); clear Unpy
                    end
            end
            if b.animal(1:2) == 'EJ'
                % rotate U & meanImage so that visual cortex at bottom, auditory on left, somsen on top
                if str2num(b.iseries(4)) == 5   % if the experiment was done in 2015, need to do the following to get visual cortex to bottom, auditory to left etc
                    U = rot90(rot90(U));
                else
                    if str2num(b.iseries(4)) > 5        % if the experiment was done after 2015
                        U      = flipud(U);
                        if str2num(b.iseries(6:7)) < 8 % if the experiment was done before August 2016
                            U      = rot90(U);
                        end
                    end
                end
            end
            t = double(readNPY(Tnpy)); clear Tnpy
            
            if size(U,3) ~= nSV && fewerSVDs
                U = U(:,:,1:nSV);
                V = V(1:nSV,:);
            end
            
            disp('done.');
            
            
            % if continuous recording, then also dual wavelength recording
            if b.contRecording && doHemoCorrect
                switch b.rigName
                    case 'BigRig'
                        hemoColour = 'green';
                    case 'zgood'
                        hemoColour = 'purple';
                end
                % also load hemodynamic U, V & t
                VHnpy = fullfile(svdDirNew,b.animal,b.iseries,b.iexp,...
                    strcat('svdTemporalComponents_',hemoColour,'.npy'));
                THnpy = fullfile(svdDirNew,b.animal,b.iseries,b.iexp,...
                    strcat('svdTemporalComponents_',hemoColour,'.timestamps.npy'));
                UHnpy = fullfile(svdDirNew,b.animal,b.iseries,...
                    strcat('svdSpatialComponents_',hemoColour,'.npy'));
                if ~exist(VHnpy)
                    VHnpy = fullfile(svdDirNew,b.animal,strcat(b.iseries,'_',b.iexp),b.iexp,...
                        strcat('svdTemporalComponents_',hemoColour,'.npy'));
                    THnpy = fullfile(svdDirNew,b.animal,strcat(b.iseries,'_',b.iexp),b.iexp,...
                        strcat('svdTemporalComponents_',hemoColour,'.timestamps.npy'));
                    UHnpy = fullfile(svdDirNew,b.animal,strcat(b.iseries,'_',b.iexp),...
                        strcat('svdSpatialComponents_',hemoColour,'.npy'));
                end
                disp('loading hemodynamic U, V & t...');
                switch svdDir
                    case 'old'
                        Vh = double(readNPY(VHnpy)); Vh = Vh'; clear VHnpy
                        Uh = double(readNPY(UHnpy)); clear UHnpy
                    case 'new'
                        if fewerSVDs
                            Uh = double(readUfromNPY(UHnpy, nSV)); clear UHnpy
                            Vh = double(readVfromNPY(VHnpy, nSV)); clear VHnpy
                        else
                            Vh = double(readNPY(VHnpy)); Vh = Vh'; clear VHnpy
                            Uh = double(readNPY(UHnpy)); clear UHnpy
                        end
                end
                if b.animal(1:2) == 'EJ'
                    % rotate U so that visual cortex at bottom, auditory on left, somsen on top
                    if str2num(b.iseries(4)) > 5        % if the experiment was done after 2015
                        Uh      = flipud(Uh);
                        if str2num(b.iseries(6:7)) < 8 % if the experiment was done before August 2016
                            Uh      = rot90(Uh);
                        end
                    end
                end
                th = double(readNPY(THnpy)); clear THnpy
                
                if size(Uh,3) ~= nSV && fewerSVDs
                    Uh = Uh(:,:,1:nSV);
                    Vh = Vh(1:nSV,:);
                end
                
                disp('done.');
                
                sizeU = size(U);
                nPix  = prod(sizeU(1:2));
                Fs = 1/median(diff(t));
                
                % do hemodynamic correction
                disp('applying hemodynamic correction...');
                
                % detrend and highpass
                highpassCutoff = 0.01; % Hz
                [b100s, a100s] = butter(2, highpassCutoff/(Fs/2), 'high');
                
                dVn = detrend(V', 'linear')';
                dVh = detrend(Vh', 'linear')';
                fVn = filter(b100s,a100s,dVn,[],2);
                fVh = filter(b100s,a100s,dVh,[],2);
                
                % Correct hemodynamic signal in blue from green
                % First need to shift alternating signals to be temporally aligned (shifts neural to hemo)
                % Eliminate odd frames out
                min_frames = min(size(fVn,2),size(fVh,2));
                fVn = fVn(:,1:min_frames);
                fVh = fVh(:,1:min_frames);
                
                fVs_th = SubSampleShift(fVn,1,2);
                
                fVh_Un = ChangeU(Uh,fVh,U);
                
                %                                 hemo_freq = [0.2,3];
                hemo_freq = [9 13];
                fVn_hemo = HemoCorrectLocal(U,fVs_th,fVh_Un,Fs,hemo_freq, 5);
                
                if tpm
                    addpath(genpath('\\basket.cortexlab.net\data\mush\chronux_2_11\spectral_analysis'));
                    % compute total powermaps per channel
                    frb(1,:) = [0.2 3];
                    frb(2,:) = [9 13];
                    frb(3,:) = [0.01 Fs/2];
                    % sub-sample U
                    scaleFactor = 3;
                    Usub    = imresize(U,[size(U,1)/scaleFactor, size(U,2)/scaleFactor]);
                    Uhsub   = imresize(Uh,[size(U,1)/scaleFactor, size(U,2)/scaleFactor]);
                    for iif = 1:size(frb,1)
                        Pmap_n = pixSpec_per_cond(V,Usub,Fs,frb(iif,:));
                        Pmap_h = pixSpec_per_cond(Vh,Uhsub,Fs,frb(iif,:));
                        Pmap_corr = pixSpec_per_cond(fVn_hemo,Usub,Fs,frb(iif,:));
                        medianP = median(reshape(Pmap_n,size(Pmap_n,1)*size(Pmap_n,2),1));
                        minP = medianP/5; maxP = medianP*5;
                        fh = figure('units','normalized','outerposition',[0 0 1 1]);
                        subplot(1,3,1);
                        imagesc(Pmap_n); axis image; axis off; caxis([minP maxP]);
                        title('neural channel');
                        subplot(1,3,2);
                        imagesc(Pmap_h); axis image; axis off; caxis([minP maxP]);
                        title('hemodynamic channel');
                        subplot(1,3,3);
                        imagesc(Pmap_corr); axis image; axis off; caxis([minP maxP]);
                        title('corrected signal');
                        suptitle({[b.animal ' ' b.iseries ' ' b.iexp], ...
                            ['Power in ' num2str(frb(iif,1)) ' to ' num2str(frb(iif,2)) ' Hz']});
                        
                        if ~ exist(fullfile(EJDirs.Data.Im,'TotalPower_perChannel'),'dir');
                            mkdir(fullfile(EJDirs.Data.Im,'TotalPower_perChannel'));
                        end
                        savefig(fh,fullfile(EJDirs.Data.Im,'TotalPower_perChannel',...
                            strcat('totalPower_',b.animal,'_',b.iseries,'_',b.iexp,'_',...
                            num2str(frb(iif,1)),'to',num2str(frb(iif,2)),'Hz.fig')));
                    end
                end
                
                
                % output variables
                V = fVn_hemo;
                t = th;             % time was shifted to hemodynamic signal
                SVDinfo = 'GCAMP_FiltHemoCorr';
                disp('done.');
                
            else
                SVDinfo = 'GCAMPraw';
                
            end
            
    end
    
    close all;
end