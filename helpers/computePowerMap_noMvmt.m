function [Pmap] = computePowerMap_noMvmt(b, ntr, U, V, t, frb, baseline, shortbl, tag);
% computes a powermap: the power per pixel in the frequency band specified
% by frb
%
% only looks at period with no movement (as detected by the wheel), and
% fills trials that don't have a long enough quiescent period with NaNs
%
% INPUTS:
% b             the behavioural block as generated by generateGenBlock
% ntr           number of trials
% U, V and t    the SVD representation of the widefield movie
% frb           frequency band of interest
% baseline      structure with information about the baseline time stamps
% shortbl       vector that contains trials numbers that have short
%               baselines that will be excluded (optional)
% tag           optional specification to be added into the name of the
%               resulting file to be saved
%
% OUTPUT:
% Pmap          the powermap
%
% written by Elina Jacobs, UCL Cortexlab
% requires Chronux toolbox


if nargin<9
    tag = '';
end

if nargin<8
    shortbl = [];
end

nSV = size(V,1);
Fs  = round(1/median(diff(t)));


if isfield(b,'exps')      % for concatenated blocks
    b.iexp = num2str(b.exps);
end

% analyse low frequency content
Pmap = zeros(size(U,1),size(U,2),ntr);
disp('computing power map...');
for iit = 1:ntr
    if ~logical(sum(ismember(shortbl,iit)))         % if baseline is sufficiently long to calculate power
        thisV = V(1:nSV,baseline.noMvmtFrames(iit,1):baseline.noMvmtFrames(iit,2));
        Pmap(:,:,iit) = pixSpec_per_cond(thisV,U(:,:,(1:nSV)),Fs,frb);
    else
        Pmap(:,:,iit) = Pmap(:,:,iit)*NaN;
    end
end
disp('done.');

save(fullfile('BaselinePower', ...
    strcat(b.animal,'_',b.iseries,'_',b.iexp,'_',...
    num2str(frb(1)),'to',num2str(frb(2)),'Hz','_PowerMap_noMvmt',tag,'.mat')),'Pmap');


end